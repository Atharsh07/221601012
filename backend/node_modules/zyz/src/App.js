import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';
import AuthForm from './components/AuthForm';
import EventForm from './components/EventForm';
import EventList from './components/EventList';

const API = 'http://localhost:5003';

function App() {
  const [token, setToken] = useState(localStorage.getItem('token') || '');
  const [authForm, setAuthForm] = useState({ username: '', password: '' });
  const [eventForm, setEventForm] = useState({ title: '', description: '', datetime: '' });
  const [events, setEvents] = useState([]);
  const [filter, setFilter] = useState('all');

  const handleAuth = async (type) => {
    try {
      const res = await axios.post(`${API}/${type}`, authForm);
      if (res.data.token) {
        setToken(res.data.token);
        localStorage.setItem('token', res.data.token);
        fetchEvents();
      }
      setAuthForm({ username: '', password: '' });
    } catch (err) {
      alert(err.response?.data?.error || "Auth failed");
    }
  };

  const fetchEvents = async () => {
  if (!token) return; // no request without token
  try {
    const res = await axios.get(`${API}/events${filter !== 'all' ? '?filter=' + filter : ''}`, {
      headers: {
        Authorization: `Bearer ${token}` // âœ… Send token like this
      }
    });
    setEvents(res.data);
  } catch (err) {
    console.error("Fetch failed:", err);
    alert("Session expired or invalid token. Please log in again.");
    setToken('');
    localStorage.removeItem('token');
  }
};


  const addEvent = async (e) => {
    e.preventDefault();
    await axios.post(`${API}/events`, eventForm, {
      headers: { Authorization: `Bearer ${token}` }
    });
    setEventForm({ title: '', description: '', datetime: '' });
    fetchEvents();
  };

  const deleteEvent = async (id) => {
    await axios.delete(`${API}/events/${id}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    fetchEvents();
  };

  const logout = () => {
    localStorage.removeItem('token');
    setToken('');
    setEvents([]);
  };

  useEffect(() => {
    fetchEvents();
  }, [token, filter]);

  return (
    <div className="container">
      <h1>ðŸ“… Event Scheduler</h1>
      {!token ? (
        <AuthForm authForm={authForm} setAuthForm={setAuthForm} handleAuth={handleAuth} />
      ) : (
        <>
          <div className="top-bar">
            <span>ðŸ”“ Logged in</span>
            <button onClick={logout}>Logout</button>
          </div>

          <div className="filters">
            <button onClick={() => setFilter('all')}>All</button>
            <button onClick={() => setFilter('upcoming')}>Upcoming</button>
            <button onClick={() => setFilter('past')}>Past</button>
          </div>

          <EventForm eventForm={eventForm} setEventForm={setEventForm} addEvent={addEvent} />
          <EventList events={events} onDelete={deleteEvent} />
        </>
      )}
    </div>
  );
}

export default App;
